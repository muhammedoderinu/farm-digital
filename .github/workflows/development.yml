name: GITHUB Actions Demo
run-name: ${{github.actor}} is testing out Github Actions
on:
  push:
    branches:
      - master
jobs:
  create-deployment-artifacts:
    name: create deployment artifacts
    runs-on: ubuntu-latest
    outputs: 
      deployment-matrix: ${{ steps.export-deployment-matrix.outputs.deployment-matrix}}
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."

      - name: Use Node 12.x
        uses: actions/setup-node@v1
        with:

          node-version: '16.x'
          

      - name: List files in the repository
        run: |
          npm install --force

      - name: build angular file
        run: npm run build 

      - name: List output file
        run: ls

      - run: echo "🍏 This job's status is ${{ job.status }}."

      - name: configure php 8.1
        uses: shivammathur/setup-php@master
        with: 
          php-version:  8.1.0
          extensions: mbstring, ctype, fileinfo, openssl, PDO, bcmath, json, tokenizer, xml

      - name: install composer dependencies
        run: |
          composer install --no-dev --no-interaction  --prefer-dist
     

      - name: list overall files
        run: ls

      - name: create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run:  tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.git --exclude=node_modules  *

      - name: store artifact for deployment
        uses: actions/upload-artifact@v3
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz

      - name: Export Deployment matrix
        id: export-deployment-matrix
        run: |
          JSON="$(cat ./deployment-config.json)"
          JSON="${JSON//'%'/'%25'}"
          JSON="${JSON//$'\n'/'%0A'}"
          JSON="${JSON//$'\r'/'%0D'}"
          echo "::set-output name=deployment-matrix::$JSON"

  prepare-release-on-server:
    runs-on: ubuntu-latest
    needs: create-deployment-artifacts
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix)}}
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: app-build
    - name: upload
      uses: nogsantos/scp-deploy@master
      with:
        src: ${{ github.sha}}.tar.gz
        host: ${{ matrix.server.ip}}
        remote: ${{ matrix.server.path}}/artifacts
        user: ${{ matrix.server.username}}
        key: ${{ secrets.AMAZON_SECRET_KEY}}
        port: ${{ matrix.server.port}}
    
       
    - name: Extract archives and create directories
      uses: appleboy/ssh-action@master
      env:
        GITHUB_SHA: ${{ github.sha }}
      with:
        host: ${{ matrix.server.ip}}
        username: ${{ matrix.server.username}}
        key: ${{ secrets.AMAZON_SECRET_KEY}}
        port: ${{ matrix.server.port}}
        envs: GITHUB_SHA
        script: |
          
          sudo mkdir -p  "${{ matrix.server.path}}/releases/${GITHUB_SHA}"
          sudo tar xzf ${{ matrix.server.path }}/artifacts/${GITHUB_SHA}.tar.gz -C "${{ matrix.server.path }}/releases/${GITHUB_SHA}"

          sudo rm -rf ${{matrix.server.path}}/releases/${GITHUB_SHA}/storage
          sudo mkdir -p ${{matrix.server.path}}/storage/{app,public,framework,logs}
          sudo mkdir -p ${{matrix.server.path}}/storage/framework/{cache,sessions,testing,views}
          sudo mkdir -p ${{matrix.server.path}}/storage/framework/cache/data
          sudo chmod -R 0777 ${{matrix.server.path}}/storage
          sudo ls ${{ matrix.server.path }}/releases/${GITHUB_SHA}

  run-before-hooks:
    name: "${{ matrix.server.name}}: Before hook"
    runs-on: ubuntu-latest

    needs: [ create-deployment-artifacts, prepare-release-on-server]
    strategy:
      matrix:
        server:  ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix)}}
    steps: 
      - name: Run before hooks
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{matrix.server.path}}/releases/${{github.sha}}
          ACTIVE_RELEASE_PATH: ${{matrix.server.path}}/current
          STORAGE_PATH: ${{matrix.server.path}}/storage
          BASE_PATH:  ${{matrix.server.path}}

        with:
          host: ${{ matrix.server.ip}}
          username: ${{ matrix.server.username}}
          key: ${{ secrets.AMAZON_SECRET_KEY}}
          port: ${{ matrix.server.port}}
          envs: GITHUB_SHA,RELEASE_PATH, ACTIVE_RELEASE_PATH, STORAGE_PATH,BASE_PATH
          script: |
            ${{matrix.server.beforeHooks}}

  activate-release:
    name: "${{ matrix.server.name}}: Activate release"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-server, run-before-hooks]
    strategy:
      matrix:
        server:  ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix)}}
    steps: 
      - name: Activate release
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{matrix.server.path}}/releases/${{github.sha}}
          ACTIVE_RELEASE_PATH: ${{matrix.server.path}}/current
          STORAGE_PATH: ${{matrix.server.path}}/storage
          BASE_PATH:  ${{matrix.server.path}}
          LARAVEL_ENV: ${{secrets.LARAVEL_ENV}}

        with:
          host: ${{ matrix.server.ip}}
          username: ${{ matrix.server.username}}
          key: ${{ secrets.AMAZON_SECRET_KEY}}
          port: ${{ matrix.server.port}}
          envs: GITHUB_SHA,RELEASE_PATH, ACTIVE_RELEASE_PATH, STORAGE_PATH,BASE_PATH, LARAVEL_ENV
          script: |
            sudo printf "%s" "$LARAVEL_ENV" > "${BASE_PATH}/.env"
            sudo ln -s -f ${BASE_PATH}/.env ${RELEASE_PATH}/farmer-backend
            sudo ln -s -f $STORAGE_PATH ${RELEASE_PATH}/farmer-backend
            sudo ln -s -n -f $RELEASE_PATH $ACTIVE_RELEASE_PATH
            sudo service php8.0-fpm reload

  run-after-hooks:
    name: "${{ matrix.server.name}}: After hook"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-server, activate-release]
    strategy:
      matrix:
        server:  ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix)}}
    steps: 
      - name: Run after hooks
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{matrix.server.path}}/releases/${{github.sha}}
          ACTIVE_RELEASE_PATH: ${{matrix.server.path}}/current
          STORAGE_PATH: ${{matrix.server.path}}/storage
          BASE_PATH:  ${{matrix.server.path}}

        with:
          host: ${{ matrix.server.ip}}
          username: ${{ matrix.server.username}}
          key: ${{ secrets.AMAZON_SECRET_KEY}}
          port: ${{ matrix.server.port}}
          envs: GITHUB_SHA,RELEASE_PATH, ACTIVE_RELEASE_PATH, STORAGE_PATH,BASE_PATH
          script: |
            ${{matrix.server.afterHooks}}

  clean-up:
    name: "${{ matrix.server.name}}: Clean up"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-server, activate-release, run-after-hooks]
    strategy:
      matrix:
        server:  ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix)}}
    steps: 
      - name: Run clean up
        uses: appleboy/ssh-action@master
        env:
          RELEASE_PATH: ${{matrix.server.path}}/releases
          ARTIFACTS_PATH: ${{matrix.server.path}}/artifacts
        with:
          host: ${{ matrix.server.ip}}
          username: ${{ matrix.server.username}}
          key: ${{ secrets.AMAZON_SECRET_KEY}}
          port: ${{ matrix.server.port}}
          envs: RELEASE_PATH, ARTIFACTS_PATH
          script: |
            cd $RELEASES_PATH && ls -t -1 | tail -n +6 | xargs rm -rf
            cd $ARTIFACTS_PATH && ls -t -1 | tail -n +6 | xargs rm -rf
